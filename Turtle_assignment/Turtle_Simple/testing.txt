//what is your thought process: 

///CONTENT

//METHODOLOGY
// STRUCTUERS 
// TESTING




// New things I learnt

//////

//METHODOLOGY

> I started off trying to parse the simple grammar in the exercise given
> I added extention like COL WORD and VARNUM next and added unions to represent OR cases in the grammar
> For the ITEMS grammar I am assuming it will either be a number or a word being looped over whithin the list, 
> What I did right off the bat was to set up my code such that the hard work was done during writing the parser, if my parser stored data within appropriate 
structs, then the interpreter would just be additional functions that utalised the stored information. This meant that setting my my ADT was essential for the parser. 

// STRUCTURERS

> I started by defining the data strucutures I needed for my parse, the various structs that I would need. I realised early on that I can utalise the use of a unions 
whereever there was an explicit OR instruction e.g. COLOUR could be a VARNUM OR a WORD

> I started off by by having complex structs, where each non-terminal had a struct of its own, however, this got complicated quite quick and I realised not all non-terminals 
needed a struct and could instead be defined in functions.

> I also stepped away from using Linked Lists, as this would require freeing up memory and could be better used as part of a extention 

>I found i was better off utalising the program struct from the noughtand1s was also very useful to keep a track of which instnruction I was using:

My initial structure looked like this: 
typedef struct PROG{
    char input[MAXTOKENSIZE][MAXTOKENSIZE];
    int current_count;

}PROG;

> 



// TESTING

> I started the assertion tests early on, however found testing parse functions via assertions a bit tricky, will come back to this, 

> One thing I am having trouble getting to work is : assert assert(isVARIABLE("$ABCZ") == true); variables with multiple inputs, my isVARIABLE function should pick 
this up, but the logic does not seem to be working. 

> Another thing that tripped me up was the presence of space in the postfix expression, my code would work for e.g. SET A ( $A ) but not SET A ($A) this took consirdable time to figure out what the issue was
> I learnt that rather than writing complex test cases, I could have figured this out via printint out my tokens from a simple line : //printf("Token %d: '%s'\n", i, p->input[i]); // Debug print




// New things I learnt

> cannot use switch case where the expression is a string therefore the INSLST function has to be a if else ladder 